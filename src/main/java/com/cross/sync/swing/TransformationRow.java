package com.cross.sync.swing;

import com.cross.sync.transfer.Transfer;
import com.cross.sync.transfer.TransferScheduler;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class TransformationRow extends JPanel {
    private JPanel transformRow;
    private JLabel Status;
    private JProgressBar transformStatus;
    private JButton statusButton;
    private JLabel transformName;
    private Transfer transfer;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    TransformationRow(Transfer transfer, String name) {
        transformRow.setSize(350, 30);
        this.transfer = transfer;
        transformName.setText(name);
        Status.setText(TransferScheduler.getInstance().isTransferScheduling(transfer) ? "scheduling" : "stop");
        transformStatus.setMinimum(0);
        transformStatus.setMaximum(100);
        transformStatus.setStringPainted(true);

        statusButton.addActionListener(i -> {
            if (statusButton.getText().equals("stop")) {
                TransferScheduler.getInstance().deleteFromScheduling(transfer);
            } else {
                TransferScheduler.getInstance().addForScheduling(transfer);
            }
            updateStatusButton();
        });

        updateStatus();
        updateStatusButton();
    }

    JPanel getContent() {
        return transformRow;
    }

    void updateStatus() {
        transformStatus.setValue(transfer.getStatus());
    }

    private void updateStatusButton() {
        Status.setText(TransferScheduler.getInstance().isTransferScheduling(transfer) ? "scheduling" : "stopped");
        statusButton.setText(TransferScheduler.getInstance().isTransferScheduling(transfer) ? "stop" : "start");
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        transformRow = new JPanel();
        transformRow.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        transformRow.setMaximumSize(new Dimension(314, 34));
        transformName = new JLabel();
        transformName.setText("Label");
        transformRow.add(transformName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Status = new JLabel();
        Status.setText("Label");
        transformRow.add(Status, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transformStatus = new JProgressBar();
        transformRow.add(transformStatus, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusButton = new JButton();
        statusButton.setText("Button");
        transformRow.add(statusButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return transformRow;
    }

}
