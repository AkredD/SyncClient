package com.cross.sync.swing;

import com.cross.sync.exception.ProviderException;
import com.cross.sync.provider.Provider;
import com.cross.sync.swing.controller.ResourceController;
import com.cross.sync.transfer.TransferScheduler;
import com.cross.sync.util.Slf4fLogger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;

class ProviderInfoRow {
    private final Provider provider;
    private JButton statusButton;
    private JLabel providerLabel;
    private JLabel providerStatus;
    private JPanel contentPane;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    ProviderInfoRow(JDialog parent, Provider provider) {
        this.provider = provider;
        providerLabel.setText(provider.getName());
        statusButton.addActionListener(i -> {
            if (statusButton.getText().equals("Connect")) {
                try {
                    provider.open();
                } catch (ProviderException e) {
                    JDialog dialog = new ExceptionDialog(parent, String.format("Can't connect to provider cause: \n%s", e.getMessage()));
                    dialog.setLocationRelativeTo(parent);
                    dialog.setVisible(true);
                }
            } else {
                try {
                    provider.close();
                } catch (IOException e) {
                    Slf4fLogger.error(this, e.getMessage());
                }
                ResourceController.getInstance().getTransfersByProvider().get(provider.getName())
                        .forEach(transfer -> TransferScheduler.getInstance().deleteFromScheduling(transfer));
            }
            updateStatus();
        });

        updateStatus();
    }

    JPanel getContent() {
        return contentPane;
    }

    private void updateStatus() {
        if (!provider.isClosed()) {
            providerStatus.setText("Active");
            statusButton.setText("Disconnect");
        } else {
            providerStatus.setText("Inactive");
            statusButton.setText("Connect");
        }
    }

    Provider getProvider() {
        return provider;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.setInheritsPopupMenu(false);
        contentPane.setMaximumSize(new Dimension(2147483647, 50));
        contentPane.setMinimumSize(new Dimension(250, 40));
        contentPane.setPreferredSize(new Dimension(300, 40));
        providerLabel = new JLabel();
        providerLabel.setText("Label");
        contentPane.add(providerLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        providerStatus = new JLabel();
        providerStatus.setText("Label");
        contentPane.add(providerStatus, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusButton = new JButton();
        statusButton.setText("Close");
        contentPane.add(statusButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
