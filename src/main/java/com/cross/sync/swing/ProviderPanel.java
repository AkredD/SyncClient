package com.cross.sync.swing;

import com.cross.sync.swing.controller.ResourceController;
import com.cross.sync.transfer.TransferScheduler;
import com.cross.sync.util.Slf4fLogger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.ArrayList;

class ProviderPanel {
    private final DefaultListModel<ProviderInfoRow> providersModel = new DefaultListModel<>();
    private final java.util.List<ProviderInfoRow> infoRowList = new ArrayList<>();
    private final JDialog parent;
    private JPanel panel1;
    private JButton addProvider;
    private JButton deleteProvider;
    private JButton changeButton;
    private JPanel providerRowsPane;
    private ProviderInfoRow selectedProvider;

    ProviderPanel(SettingsDialog settingsDialog) {
        this.parent = settingsDialog;
        addProvider.addActionListener(i -> {
            Dialog dialog = new CreationProviderDialog(settingsDialog, this::updateProviderList, null);
            dialog.setLocationRelativeTo(settingsDialog);
            dialog.setVisible(true);
        });

        changeButton.addActionListener(i -> {
            if (selectedProvider != null) {
                Dialog dialog = new CreationProviderDialog(settingsDialog, this::updateProviderList, selectedProvider.getProvider());
                dialog.setLocationRelativeTo(settingsDialog);
                dialog.setVisible(true);
            }
        });

        deleteProvider.addActionListener(i -> {
            if (selectedProvider != null) {
                try {
                    ResourceController.getInstance().getTransfersByProvider().get(selectedProvider.getProvider().getName())
                            .forEach(transfer -> {
                                if (ResourceController.getInstance().getTransferMap().containsKey(transfer.getName())) {
                                    TransferScheduler.getInstance().deleteFromScheduling(transfer);
                                    ResourceController.getInstance().getTransferMap().remove(transfer.getName());
                                }
                            });
                    ResourceController.getInstance().getTransfersByProvider().remove(selectedProvider.getProvider().getName());
                    selectedProvider.getProvider().close();
                    ResourceController.getInstance().getLinuxProviderMap().remove(selectedProvider.getProvider().getName());
                } catch (IOException e) {
                    Slf4fLogger.error(this, e.getMessage());
                }
                updateProviderList();
            }
        });

        updateProviderList();
    }

    JPanel getPanel() {
        return panel1;
    }

    private void updateProviderList() {
        providerRowsPane.removeAll();

        infoRowList.clear();
        providerRowsPane.setLayout(new BoxLayout(providerRowsPane, BoxLayout.Y_AXIS));
        providersModel.clear();
        Color defaultColor = providerRowsPane.getBackground();
        ResourceController.getInstance().getLinuxProviderMap().values()
                .forEach(provider -> {
                    ProviderInfoRow infoRow = new ProviderInfoRow(parent, provider);
                    providerRowsPane.add(infoRow.getContent());
                    infoRow.getContent().addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent mouseEvent) {
                            infoRowList.forEach(otherRow -> otherRow.getContent().setBackground(defaultColor));
                            infoRow.getContent().setBackground(Color.GRAY);
                            selectedProvider = infoRow;
                        }

                        @Override
                        public void mousePressed(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseReleased(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseEntered(MouseEvent mouseEvent) {

                        }

                        @Override
                        public void mouseExited(MouseEvent mouseEvent) {

                        }
                    });
                    infoRowList.add(infoRow);
                });
        providerRowsPane.revalidate();
        providerRowsPane.updateUI();


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        providerRowsPane = new JPanel();
        providerRowsPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(providerRowsPane);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addProvider = new JButton();
        addProvider.setText("+");
        panel2.add(addProvider, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        deleteProvider = new JButton();
        deleteProvider.setText("-");
        panel2.add(deleteProvider, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, -1), null, 0, false));
        changeButton = new JButton();
        changeButton.setText("Change");
        panel2.add(changeButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
