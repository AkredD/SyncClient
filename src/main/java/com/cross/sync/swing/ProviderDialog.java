package com.cross.sync.swing;

import com.cross.sync.provider.LinuxProvider;
import com.cross.sync.provider.impl.SSHProvider;
import com.cross.sync.swing.controller.ResourceController;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;

@SuppressWarnings("ALL")
public class ProviderDialog extends JDialog {
    private JPanel contentPane;
    private JButton deleteButton = new JButton();
    private JButton Cancel;
    private JList list1;
    private JButton Add;
    private DefaultListModel providersModel = new DefaultListModel();
    private Integer selectedProviderIndex = -1;

    public ProviderDialog(Frame parent, Boolean modal) {
        super(parent, modal);
        setTitle("Providers");
        $$$setupUI$$$();
        setContentPane(contentPane);
        setTitle("Providers");
        setSize(400, 325);
        setModal(true);
        getRootPane().setDefaultButton(Cancel);
        deleteButton.addActionListener(e -> {
            if (selectedProviderIndex != -1) {
                LinuxProvider provider = ResourceController.getInstance().getLinuxProviderMap().remove(providersModel.get(selectedProviderIndex));
                if (provider instanceof SSHProvider) {
                    try {
                        ((SSHProvider) provider).close();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
                providersModel.remove(selectedProviderIndex);
                selectedProviderIndex = -1;
            }
        });

        Cancel.addActionListener(e -> onCancel());

        Add.addActionListener(e -> {
            JDialog dialog = new CreationProviderDialog(this);
            dialog.setVisible(true);
        });
        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        list1.addListSelectionListener(ev -> {
            selectedProviderIndex = list1.getSelectedIndex();
        });

        list1.setModel(providersModel);
        updateProviderList();
    }

    void updateProviderList() {
        providersModel.clear();
        providersModel.addAll(ResourceController.getInstance().getLinuxProviderMap().keySet());
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setMinimumSize(new Dimension(218, 300));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        deleteButton.setLabel("Delete");
        deleteButton.setText("Delete");
        panel2.add(deleteButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Cancel = new JButton();
        Cancel.setLabel("Close");
        Cancel.setText("Close");
        panel2.add(Cancel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Add = new JButton();
        Add.setLabel("Add");
        Add.setText("Add");
        panel2.add(Add, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, BorderLayout.CENTER);
        list1 = new JList();
        list1.setMaximumSize(new Dimension(0, 0));
        list1.setMinimumSize(new Dimension(0, 0));
        scrollPane1.setViewportView(list1);
    }

    /**
     *
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
