package com.cross.sync.swing;

import com.cross.sync.swing.controller.ResourceController;
import com.cross.sync.transfer.Transfer;
import com.cross.sync.transfer.TransferScheduler;
import com.cross.sync.util.Slf4fLogger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

@SuppressWarnings({"SameParameterValue", "RedundantSuppression"})
public class JSync extends JFrame implements MenuConstants, ActionListener {
    private JPanel contentPane;
    private JButton buttonCancel;
    private JPanel rowPane;
    private JScrollPane scrollPane1;
    private Thread updateThread;
    private List<TransformationRow> transformationRows;

    public JSync() {
        setTitle("JSync");
        transformationRows = new ArrayList<>();
        setContentPane(contentPane);

        buttonCancel.addActionListener(e -> onCancel());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                onExitDaemons();
            }
        });
        createMenuBar(this);
        updateTransferPane();
    }

    private void onExitDaemons() {
        if (updateThread != null) {
            updateThread.interrupt();
        }
        TransferScheduler.getInstance().exit();
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        ResourceController.getInstance().getLinuxProviderMap().forEach((key, value) -> {
            try {
                value.close();
            } catch (IOException e) {
                Slf4fLogger.error(this, "Can't close provider " + key);
            }
        });
    }

    private void onCancel() {
        onExitDaemons();
        dispose();
    }

    private void updateTransferPane() {
        if (updateThread != null) {
            updateThread.interrupt();
        }
        transformationRows.clear();
        Set<Map.Entry<String, Transfer>> transferList = ResourceController.getInstance().getTransferMap().entrySet();
        rowPane.removeAll();
        scrollPane1.setViewportView(rowPane);
        rowPane.setLayout(new BoxLayout(rowPane, BoxLayout.Y_AXIS));
        transferList.forEach(transferEntry -> {
            TransformationRow row = new TransformationRow(this, transferEntry.getValue(), transferEntry.getKey());
            transformationRows.add(row);
            rowPane.add(row.getContent());
        });
        rowPane.revalidate();
        updateThread = new Thread(() -> {
            while (true) {
                transformationRows.forEach(TransformationRow::updateStatus);
                ResourceController.getInstance().getLinuxProviderMap().values()
                        .forEach(provider -> {
                            if (!provider.isClosed()) {
                                provider.ping();
                            } else {
                                ResourceController.getInstance().getTransfersByProvider().get(provider.getName())
                                        .forEach(transfer -> TransferScheduler.getInstance().deleteFromScheduling(transfer));
                            }
                        });
                try {
                    Thread.sleep(300);
                } catch (InterruptedException e) {
                    return;
                }
            }
        });
        rowPane.updateUI();
        scrollPane1.updateUI();
        updateThread.start();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setPreferredSize(new Dimension(600, 450));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Exit");
        panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        rowPane = new JPanel();
        rowPane.setLayout(new GridBagLayout());
        scrollPane1.setViewportView(rowPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private JMenu createMenu(String s, int key, JMenuBar toMenuBar) {
        JMenu temp = new JMenu(s);
        temp.setMnemonic(key);
        toMenuBar.add(temp);
        return temp;
    }

    private void createMenuItem(String s, int key, JMenu toMenu, ActionListener al) {
        JMenuItem temp = new JMenuItem(s, key);
        temp.addActionListener(al);
        toMenu.add(temp);

    }

    private void createMenuItem(String s, int key, JMenu toMenu, int aclKey, ActionListener al) {
        JMenuItem temp = new JMenuItem(s, key);
        temp.addActionListener(al);
        temp.setAccelerator(KeyStroke.getKeyStroke(aclKey, InputEvent.CTRL_DOWN_MASK));
        toMenu.add(temp);

    }

    private void createMenuBar(JFrame f) {
        JMenuBar mb = new JMenuBar();
        JMenu fileMenu = createMenu(file, KeyEvent.VK_T, mb);
        JMenu helpMenu = createMenu(helpHelpTopic, KeyEvent.VK_H, mb);

        createMenuItem(settingsMenu, KeyEvent.VK_S, fileMenu, KeyEvent.VK_P, this);

        createMenuItem(helpAboutNotepad, KeyEvent.VK_H, helpMenu, this);

        f.setJMenuBar(mb);
    }

    @Override
    public void actionPerformed(ActionEvent actionEvent) {
        String cmdText = actionEvent.getActionCommand();
        JDialog dialog = null;
        switch (cmdText) {
            case settingsMenu: {
                dialog = new SettingsDialog(this, this::updateTransferPane);
                break;
            }
            case helpAboutNotepad: {
                dialog = new HelpDialog(this);
            }
        }
        if (dialog != null) {
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
        }
    }
}
